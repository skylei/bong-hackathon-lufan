{
  "name": "passport-bong",
  "version": "0.1.7",
  "description": "Bong authentication strategy for Passport.",
  "keywords": [
    "passport",
    "bong",
    "auth",
    "authn",
    "authentication",
    "identity"
  ],
  "author": "",
  "repository": {
    "type": "git",
    "url": "http://github.com/junmer/passport-bong.git"
  },
  "bugs": {
    "url": "http://github.com/junmer/passport-bong/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib",
  "dependencies": {
    "passport-oauth2": "git://github.com/junmer/passport-oauth2#master"
  },
  "devDependencies": {
    "mocha": "1.x.x",
    "chai": "1.x.x"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "scripts": {
    "test": "mocha --reporter spec --require test/bootstrap/node test/*.test.js"
  },
  "readme": "# Passport-Bong\r\n\r\n> Copied from [Passport-github](https://github.com/jaredhanson/passport-github) by [Jared Hanson](http://github.com/jaredhanson)\r\n\r\n[Passport](http://passportjs.org/) strategy for authenticating with [Bong](http://bong.cn/open/)\r\nusing the OAuth 2.0 API.\r\n\r\nThis module lets you authenticate using Bong in your Node.js applications.\r\nBy plugging into Passport, Bong authentication can be easily and\r\nunobtrusively integrated into any application or framework that supports\r\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\r\n[Express](http://expressjs.com/).\r\n\r\n## Install\r\n\r\n    $ npm install passport-bong\r\n\r\n## Usage\r\n\r\n#### Configure Strategy\r\n\r\nThe Bong authentication strategy authenticates users using a Bong account\r\nand OAuth 2.0 tokens.  The strategy requires a `verify` callback, which accepts\r\nthese credentials and calls `done` providing a user, as well as `options`\r\nspecifying a client ID, client secret, and callback URL.\r\n\r\n    passport.use(new BongStrategy({\r\n        clientID: BONG_CLIENT_ID,\r\n        clientSecret: BONG_CLIENT_SECRET,\r\n        callbackURL: \"http://127.0.0.1:3000/auth/bong/callback\"\r\n      },\r\n      function(accessToken, refreshToken, profile, done) {\r\n        User.findOrCreate({ bongId: profile.uid }, function (err, user) {\r\n          return done(err, user);\r\n        });\r\n      }\r\n    ));\r\n\r\n#### Authenticate Requests\r\n\r\nUse `passport.authenticate()`, specifying the `'Bong'` strategy, to\r\nauthenticate requests.\r\n\r\nFor example, as route middleware in an [Express](http://expressjs.com/)\r\napplication:\r\n\r\n    app.get('/auth/bong',\r\n      passport.authenticate('bong'));\r\n\r\n    app.get('/auth/bong/callback', \r\n      passport.authenticate('bong', { failureRedirect: '/login' }),\r\n      function(req, res) {\r\n        // Successful authentication, redirect home.\r\n        res.redirect('/');\r\n      });\r\n\r\n## Examples\r\n\r\nFor a complete, working example, refer to the [login example](https://github.com/junmer/passport-bong/tree/master/examples/login).\r\n\r\n    $ git clone https://github.com/junmer/passport-bong\r\n    $ cd passport-bong/examples/login && npm install \r\n    $ vi app.js //update BONG_CLIENT_ID, BONG_CLIENT_SECRET\r\n    $ node app.js\r\n\r\n## Tests\r\n\r\n    $ npm install --dev\r\n    $ make test\r\n\r\n[![Build Status](https://secure.travis-ci.org/junmer/passport-bong.png)](http://travis-ci.org/junmer/passport-bong)\r\n\r\n## Credits\r\n\r\n  - [Jared Hanson](http://github.com/jaredhanson)\r\n  - [junmer](http://github.com/junmer)\r\n\r\n## License\r\n\r\n[The MIT License](http://opensource.org/licenses/MIT)\r\n\r\nCopyright (c) 2011-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\r\n\r\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/junmer/passport-bong",
  "_id": "passport-bong@0.1.7",
  "_from": "passport-bong@"
}
